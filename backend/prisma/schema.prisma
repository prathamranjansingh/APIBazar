generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- User Management ----------------

model User {
  id        String   @id @default(uuid())
  auth0Id   String   @unique
  email     String   @unique
  name      String?
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile              Profile?
  apiKeys              ApiKey[]
  purchasedAPIs        PurchasedAPI[]
  listedAPIs           Api[]
  transactionsAsBuyer  Transaction[]  @relation("buyerTransaction")
  transactionsAsSeller Transaction[]  @relation("sellerTransaction")
  reviews              Review[] // Reviews created by this user
  reviewsReceived      Review[]       @relation("receivedReviews")
  notifications        Notification[]
  webhooks             Webhook[]
}

model Profile {
  id       String  @id @default(uuid())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio      String?
  location String?
  website  String?
  company  String?
}

// ---------------- API Management ----------------

model Api {
  id            String       @id @default(uuid())
  name          String
  description   String
  category      String // Can define an enum if needed
  documentation String // Markdown content
  pricingModel  PricingModel
  price         Float? // Price for PAID APIs (null for FREE)
  baseUrl       String
  ownerId       String
  rateLimit     Int          @default(100) // Default rate limit per hour
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  owner        User           @relation(fields: [ownerId], references: [id])
  endpoints    Endpoint[]
  analytics    ApiAnalytics?
  transactions Transaction[]
  reviews      Review[]
  purchasedBy  PurchasedAPI[]
  apiKeys      ApiKey[]
  webhooks     Webhook[]
  callLogs     ApiCallLog[]
}

enum PricingModel {
  FREE
  PAID
}

model Endpoint {
  id             String   @id @default(uuid())
  apiId          String
  api            Api      @relation(fields: [apiId], references: [id], onDelete: Cascade)
  name           String
  method         String // GET, POST, PUT, DELETE, etc.
  path           String // "/users", "/posts/:id"
  description    String?
  headers        Json? // Example headers
  requestBody    Json? // Example request body
  responseSchema Json? // Example response
  rateLimit      Int? // Custom rate limit (null = use API default)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([apiId, path, method])
}

// ---------------- Analytics ----------------

model ApiAnalytics {
  id              String   @id @default(uuid())
  apiId           String   @unique
  api             Api      @relation(fields: [apiId], references: [id], onDelete: Cascade)
  totalCalls      Int      @default(0)
  successCalls    Int      @default(0)
  failedCalls     Int      @default(0)
  errorRate       Float    @default(0.0)
  responseTimeAvg Float    @default(0.0)
  lastUpdated     DateTime @updatedAt

  @@index([apiId])
}

model ApiCallLog {
  id           String   @id @default(uuid())
  apiId        String
  api          Api      @relation(fields: [apiId], references: [id], onDelete: Cascade)
  timestamp    DateTime @default(now())
  statusCode   Int
  responseTime Float
  endpoint     String?
  consumerId   String?
  country      String?
  userAgent    String?
  ipAddress    String?
  errorMessage String?

  @@index([apiId])
  @@index([timestamp])
  @@index([consumerId])
  @@index([country])
  @@index([endpoint])
}

// ---------------- Rate Limiting ----------------

model RateLimitLog {
  id        String   @id @default(uuid())
  apiKeyId  String
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  count     Int      @default(1)
  ip        String?
  endpoint  String?

  @@index([apiKeyId, timestamp])
}

// ---------------- API Access ----------------

model ApiKey {
  id            String         @id @default(uuid())
  apiId         String
  api           Api            @relation(fields: [apiId], references: [id], onDelete: Cascade)
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  key           String         @unique
  name          String?
  rateLimit     Int            @default(1000) // Max requests per month
  isActive      Boolean        @default(true)
  expiresAt     DateTime?
  createdAt     DateTime       @default(now())
  lastUsed      DateTime?
  rateLimitLogs RateLimitLog[]

  @@index([apiId, userId])
}

// ---------------- Webhooks ----------------

model WebhookDelivery {
  id        String   @id @default(uuid())
  webhookId String
  webhook   Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  event     String
  status    String
  payload   String
  error     String?
  createdAt DateTime @default(now())

  @@index([webhookId])
  @@index([status])
}

model Webhook {
  id            String            @id @default(uuid())
  name          String
  url           String
  secret        String?
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiId         String
  api           Api               @relation(fields: [apiId], references: [id], onDelete: Cascade)
  events        String[]
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  lastTriggered DateTime?
  lastStatus    Int?
  failCount     Int               @default(0)
  deliveries    WebhookDelivery[]

  @@index([apiId, isActive])
}

// ---------------- Notifications ----------------

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  @@index([userId, isRead])
  @@index([createdAt])
}

enum NotificationType {
  API_PURCHASED
  PURCHASE_CONFIRMED
  API_UPDATED
  NEW_REVIEW
  RATE_LIMIT_REACHED
  PAYMENT_RECEIVED
  SYSTEM
}

// ---------------- Marketplace Features ----------------

model PurchasedAPI {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiId     String
  api       Api      @relation(fields: [apiId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, apiId])
}

model Transaction {
  id        String   @id @default(uuid())
  buyerId   String
  sellerId  String
  apiId     String
  amount    Float
  status    String   @default("completed")
  createdAt DateTime @default(now())
  paymentId String
  buyer     User     @relation(fields: [buyerId], references: [id], name: "buyerTransaction")
  seller    User     @relation(fields: [sellerId], references: [id], name: "sellerTransaction")
  api       Api      @relation(fields: [apiId], references: [id])

  @@index([buyerId, apiId])
  @@index([sellerId])
}

// ---------------- Social Features ----------------

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  apiId     String
  api       Api      @relation(fields: [apiId], references: [id])
  authorId  String?
  author    User?    @relation("receivedReviews", fields: [authorId], references: [id], onDelete: SetNull)
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  @@unique([userId, apiId])
}
