generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(uuid())
  auth0Id               String          @unique
  email                 String          @unique
  name                  String?
  picture               String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  profile               Profile?
  apiKeys               ApiKey[]
  purchasedAPIs         PurchasedAPI[]
  listedAPIs            Api[]
  transactionsAsBuyer   Transaction[] @relation("buyerTransaction")
  transactionsAsSeller  Transaction[] @relation("sellerTransaction")
  reviews               Review[]
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  bio       String?
  location  String?
  website   String?
}

model Api {
  id            String          @id @default(uuid())
  name          String
  description   String
  category      String
  documentation String          // Can be used for Markdown or Notion-like storage
  pricingModel  PricingModel
  baseUrl       String
  ownerId       String
  owner         User            @relation(fields: [ownerId], references: [id])
  endpoints     Endpoint[]
  analytics     ApiAnalytics?
  transactions  Transaction[]
  reviews       Review[]
  purchasedBy   PurchasedAPI[]
  apiKeys       ApiKey[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum PricingModel {
  FREE
  PAID
  SUBSCRIPTION
}

model Endpoint {
  id          String @id @default(uuid())
  apiId       String
  api         Api    @relation(fields: [apiId], references: [id])
  method      String // GET, POST, PUT, DELETE, etc.
  path        String // "/users", "/posts/:id"
  description String?
  headers     Json?
  requestBody Json?
  response    Json? 
}

model ApiAnalytics {
  id               String   @id @default(uuid())
  apiId            String   @unique
  api              Api      @relation(fields: [apiId], references: [id])
  totalCalls       Int      @default(0)
  errorRate        Float    @default(0.0)
  responseTimeAvg  Float    @default(0.0)
  updatedAt        DateTime @updatedAt
  @@index([apiId])
}

model ApiKey {
  id        String @id @default(uuid())
  apiId     String
  api       Api    @relation(fields: [apiId], references: [id])
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  key       String @unique
  rateLimit Int    @default(1000) // Max requests per month
  expiresAt DateTime? // Optional expiration
  createdAt DateTime @default(now())
}

model PurchasedAPI {
  id        String @id @default(uuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  apiId     String
  api       Api    @relation(fields: [apiId], references: [id])
  createdAt DateTime @default(now())
}

model Transaction {
  id        String   @id @default(uuid())
  buyerId   String
  sellerId  String
  apiId     String
  amount    BigInt
  createdAt DateTime @default(now())
  buyer     User @relation(fields: [buyerId], references: [id], name: "buyerTransaction")
  seller    User @relation(fields: [sellerId], references: [id], name: "sellerTransaction")
  api       Api  @relation(fields: [apiId], references: [id])
  @@index([buyerId, apiId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  apiId     String
  api       Api      @relation(fields: [apiId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}
